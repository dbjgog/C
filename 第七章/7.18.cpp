/*
寄存器变量（register变量）
一般情况下，变量（包括静态存储方式的动态存储方式）的值是存放在内存中的。
当程序中用到哪一个变量的值时，由控制器发出指令将内存中该变量的值送到运算器中。
经过运算器进行运算，如果需要存数，再从运算器将数据送到内存存放。

如果一些变量使用频繁（例如，再一个函数中执行10000次循环，每次循环中都要引用某局部变量），
则为存取变量的值要花费不少时间。为提高执行效率，允许将局部变量的值放在CPU中的寄存器中，
需要用时直接从寄存器取出参加运算，不必再到内存中去存取。由于对寄存器的存取速度远高于对内存的存取
速度，由此这样做可以提高执行效率。这种变量叫做寄存器变量，用关键字register作声明。

优化的编译系统能够识别使用频繁的变量，从而自动地将这些变量放在寄存器中，不需要程序设计者指定。
*/

/*
全局变量的作用域，是整个文件范围还是文件中的一部分范围？
是在一个文件中有效，还是再程序的所有文件中都有效？这就需要指定不同的存储类别。

（1）在一个文件内扩展外部变量地作用域
如果外部变量不在文件地开头定义。其有效地作用范围只限于定义处到文件结束。
在定义点之前地函数不能引用该外部变量。如果由于某种考虑，在定义点之前地函数需要引用该外部变量，
则应该在引用之前用关键字“extern”对该变量作“外部变量声明”，表示把该外部变量地作用域扩展到此位置。
有了此声明，就可以从“声明”处起，合法地使用该外部变量。
*/

/*
例7.18 调用函数，求3个整数地大者。
*/

#include<stdio.h>
int main()
{
	int max();
	extern int A, B, C;//把外部变量A，B，C地作用域扩展到从此处开始
	printf("Please enter three integer numbers:");
	scanf("%d %d %d", &A, &B, &C);
	printf("max is %d\n", max());
	return 0;
}

int A, B, C;

int max()
{
	int m;
	m = A>B?A:B;
	if(C > m) m = C;
	return (m);
}
